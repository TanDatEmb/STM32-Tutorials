# Timer Interrupts
Timer Interrupts cho phép bạn tạo ra các ngắt định kỳ hoặc tại các thời điểm cụ thể dựa trên giá trị của bộ đếm.

Các bước cấu hình:
1. Kích hoạt đồng hồ cho bộ định thời.
2. Cấu hình các thông số của bộ định thời.
3. Bật ngắt cho bộ định thời trong thanh ghi DIER (DMA/Interrupt Enable Register).
4. Cấu hình NVIC để bật ngắt.

Ví dụ:
```cpp
#include "stm32f4xx.h"

void TIM2_IRQHandler(void) {
    // Xử lý ngắt
    if (TIM2->SR & TIM_SR_UIF) {
        // Clear update interrupt flag
        TIM2->SR &= ~TIM_SR_UIF;
        // Code xử lý ngắt
    }
}

int main(void) {
    // Kích hoạt đồng hồ cho TIM2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
    
    // Cấu hình bộ định thời
    TIM2->PSC = 16000 - 1; // Prescaler
    TIM2->ARR = 1000 - 1;  // Auto-reload value
    TIM2->DIER |= TIM_DIER_UIE; // Bật ngắt update

    // Bật ngắt trong NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
    
    // Bắt đầu bộ định thời
    TIM2->CR1 |= TIM_CR1_CEN;

    while (1) {
        // Chương trình chính
    }
}


#include "stm32f4xx.h"

void Timer_Config(void) {
    // Bật xung nhịp cho TIM2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;

    // Cài đặt prescaler và auto-reload
    TIM2->PSC = 16000 - 1;  // Chia xung nhịp
    TIM2->ARR = 1000 - 1;   // Đếm từ 0 đến 999

    // Cho phép ngắt cập nhật
    TIM2->DIER |= TIM_DIER_UIE;

    // Cấu hình NVIC cho TIM2
    NVIC_EnableIRQ(TIM2_IRQn);
    NVIC_SetPriority(TIM2_IRQn, 1);

    // Bật counter của TIM2
    TIM2->CR1 |= TIM_CR1_CEN;
}

void TIM2_IRQHandler(void) {
    if (TIM2->SR & TIM_SR_UIF) { // Kiểm tra cờ ngắt cập nhật
        TIM2->SR &= ~TIM_SR_UIF; // Xóa cờ ngắt
        // Xử lý ngắt ở đây
    }
}

int main(void) {
    // Khởi tạo hệ thống
    SystemInit();

    // Cấu hình timer
    Timer_Config();

    while (1) {
        // Vòng lặp chính
    }
}

